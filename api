import json
import random
import boto3
import datetime
from decimal import Decimal

# Initialize DynamoDB
dynamodb = boto3.resource('dynamodb')
FEEDBACK_TABLE_NAME = 'JamAgentFeedback'

def greet_student_logic(event):
    """Handles the initial greeting for the student."""
    greeting_message = "Hi, I'm your Jam Session Agent! I'm here to conduct jam sessions for you. Would you like to start the session? Type 'yes' or 'no'."
    return _create_bedrock_response(event, greeting_message)

def present_topics_logic(event):
    """Selects and presents two random topics to the student."""
    all_topics = [
        "The impact of social media on teenagers",
        "The importance of environmental conservation",
        "The future of artificial intelligence in education",
        "The benefits of learning a new language",
        "The role of sports in personal development",
        "The challenges and rewards of entrepreneurship",
        "The significance of cultural diversity",
        "The ethics of genetic engineering",
        "The pros and cons of remote learning",
        "The influence of music on mood and productivity",
        "The impact of historical events on modern society",
        "The importance of critical thinking in the digital age"
    ]

    if len(all_topics) < 2:
        return _create_bedrock_response(event, "Error: Not enough topics available to present.", http_status_code=500)

    selected_topics = random.sample(all_topics, 2)
    topic1 = selected_topics[0]
    topic2 = selected_topics[1]

    response_message = (
        f"Here are two topics for your jam session. Please select one by typing '1' or '2':\n\n"
        f"1. {topic1}\n"
        f"2. {topic2}\n\n"
    )
    
    parameters = [
        {"name": "topic1_presented", "type": "string", "value": topic1},
        {"name": "topic2_presented", "type": "string", "value": topic2}
    ]
    return _create_bedrock_response(event, response_message, parameters=parameters)

def start_jam_session_logic(event):
    """Initiates the jam session based on the student's selected topic."""
    selected_topic = None

    if 'requestBody' in event and \
       'content' in event['requestBody'] and \
       'application/json' in event['requestBody']['content'] and \
       'properties' in event['requestBody']['content']['application/json']:
        
        for prop in event['requestBody']['content']['application/json']['properties']:
            if prop.get('name') == 'selectedTopic':
                selected_topic = prop.get('value')
                break

    if not selected_topic:
        return _create_bedrock_response(event, "Error: No topic selected to start the session.", http_status_code=400)
    
    response_message = (
        f"Okay, great choice! Your topic is: **{selected_topic}**.\n"
        "Please start speaking about this topic for about one minute.\n"
        "I'll be listening and will provide feedback afterwards. Go ahead when you're ready!"
    )
    
    parameters = [{"name": "current_jam_topic", "type": "string", "value": selected_topic}]
    return _create_bedrock_response(event, response_message, parameters=parameters)

def provide_feedback_logic(event):
    spoken_text = None
    jam_topic = None
    
    # Extract frontend sessionId from inputText
    input_text = event.get('inputText', '')
    frontend_session_id = None
    
    if '[FRONTEND_SESSION:' in input_text:
        import re
        match = re.search(r'\[FRONTEND_SESSION:([^\]]+)\]', input_text)
        if match:
            frontend_session_id = match.group(1)
    
    print(f"Frontend sessionId extracted: {frontend_session_id}")
    print(f"Agent sessionId: {event.get('sessionId')}")

    if 'requestBody' in event and \
       'content' in event['requestBody'] and \
       'application/json' in event['requestBody']['content'] and \
       'properties' in event['requestBody']['content']['application/json']:
        
        for prop in event['requestBody']['content']['application/json']['properties']:
            if prop.get('name') == 'spokenText':
                spoken_text = prop.get('value')
            elif prop.get('name') == 'topic':
                jam_topic = prop.get('value')
    
    session_id = frontend_session_id if frontend_session_id else event.get('sessionId', 'unknown-session')
    print(f"Using sessionId for DynamoDB: {session_id}")

    if not spoken_text:
        return _create_bedrock_response(event, "Please provide some text to give feedback on.", http_status_code=400)
    
    # Enhanced feedback analysis
    word_count = len(spoken_text.split())
    sentence_count = len([s for s in spoken_text.split('.') if s.strip()])
    
    # Grammar analysis
    grammar_issues = []
    if ' i ' in spoken_text.lower():
        grammar_issues.append("Remember to capitalize 'I'")
    if word_count < 20:
        grammar_issues.append("Try to speak more to demonstrate complex sentence structures")
    
    grammar_feedback = "Good grammar overall." if not grammar_issues else "Areas to improve: " + ", ".join(grammar_issues)
    
    # Vocabulary analysis
    unique_words = len(set(spoken_text.lower().split()))
    vocab_diversity = unique_words / word_count if word_count > 0 else 0
    
    if vocab_diversity > 0.7:
        vocab_feedback = "Excellent vocabulary diversity!"
    elif vocab_diversity > 0.5:
        vocab_feedback = "Good vocabulary usage."
    else:
        vocab_feedback = "Try to use more varied vocabulary."
    
    # Fluency analysis
    filler_words = ['um', 'uh', 'like', 'you know','haa','ha','so','and','ok','okay']
    filler_count = sum(spoken_text.lower().count(filler) for filler in filler_words)
    
    if filler_count == 0:
        pronunciation_feedback = "Excellent fluency with no filler words!"
    elif filler_count <= 2:
        pronunciation_feedback = "Good fluency with minimal hesitation."
    else:
        pronunciation_feedback = f"Try to reduce filler words (found {filler_count}). Practice will help improve fluency."
    
    # Calculate overall rating
    grammar_score = 8 if not grammar_issues else max(5, 8 - len(grammar_issues))
    vocab_score = int(vocab_diversity * 10)
    fluency_score = max(5, 10 - filler_count)
    content_score = min(10, word_count // 5)
    
    overall_rating = int((grammar_score + vocab_score + fluency_score + content_score) / 4)
    
    # Specific improvement tip
    if grammar_issues:
        specific_example = f"Focus on: {grammar_issues[0]}"
    elif filler_count > 2:
        specific_example = "Practice speaking slowly to reduce filler words"
    elif word_count < 30:
        specific_example = "Try to elaborate more on your points"
    else:
        specific_example = "Great job! Keep practicing to maintain this level"
    
    feedback_message = (
        f"Thank you for your jam session on '{jam_topic if jam_topic else 'your chosen topic'}'!\n\n"
        f"**Detailed Feedback:**\n"
        f"📝 **Grammar ({grammar_score}/10):** {grammar_feedback}\n"
        f"📚 **Vocabulary ({vocab_score}/10):** {vocab_feedback}\n"
        f"🗣️ **Fluency ({fluency_score}/10):** {pronunciation_feedback}\n"
        f"📊 **Content ({content_score}/10):** You spoke {word_count} words in {sentence_count} sentences.\n\n"
        f"🎯 **Overall Rating:** {overall_rating}/10\n\n"
        f"💡 **Improvement Tip:** {specific_example}\n\n"
    )
    
    # Store Feedback in DynamoDB
    
    return _create_bedrock_response(event, feedback_message)

def _create_bedrock_response(event, message_body, http_status_code=200, parameters=None):
    response_body = {
        "TEXT": {
            "body": str(message_body)
        }
    }

    agent_response = {
        "messageVersion": "1.0",
        "response": {
            "actionGroup": event.get("actionGroup", "jam-session-actions"),
            "apiPath": event.get("apiPath", "/unknown"),
            "httpMethod": "POST",
            "httpStatusCode": http_status_code,
            "responseBody": response_body
        }
    }
    
    if parameters:
        agent_response["response"]["parameters"] = parameters
    
    return agent_response

def lambda_handler(event, context):
    try:
        print(f"Received event: {json.dumps(event, indent=2)}")
        
        # Always return greeting for now to test basic functionality
        return greet_student_logic(event)
            
    except Exception as e:
        print(f"Lambda error: {str(e)}")
        return _create_bedrock_response(event, "Service temporarily unavailable", http_status_code=500)e=200, parameters=None):
    response_body = {
        "TEXT": {
            "body": str(message_body)
        }
    }

    agent_response = {
        "messageVersion": "1.0",
        "response": {
            "actionGroup": event.get("actionGroup", "jam-session-actions"),
            "apiPath": event.get("apiPath", "/unknown"),
            "httpMethod": "POST",
            "httpStatusCode": http_status_code,
            "responseBody": response_body
        }
    }
    
    if parameters:
        agent_response["response"]["parameters"] = parameters
    
    return agent_response

def lambda_handler(event, context):
    try:
        print(f"Received event: {json.dumps(event, indent=2)}")
        
        # Always return greeting for now to test basic functionality
        return greet_student_logic(event)
            
    except Exception as e:
        print(f"Lambda error: {str(e)}")
        return _create_bedrock_response(event, "Service temporarily unavailable", http_status_code=500)




